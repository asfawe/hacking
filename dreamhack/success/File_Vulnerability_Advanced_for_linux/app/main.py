import os, subprocess
from functools import wraps
from flask import Flask, request

app = Flask(__name__)
API_KEY = os.environ.get('API_KEY', None)

def key_required(view): # 여기서 말하는 view가 바로 admin이다.
    @wraps(view) # 여기서 wraps 데코레이터를 사용하는 이유는 wrapped_view가 view(admin)의 아큐먼트를 사용해야 하기 때문이다.
    def wrapped_view(**kwargs): # kwargs를 이용해서 쿼리 파라미터를 받을 수 있다.
        apikey = request.args.get('API_KEY', None) # 그래서 /admin?API_KEY=asfd를 했을 때 가져올 수 있는 이유이다.
        if API_KEY and apikey:
            if apikey == API_KEY:
                return view(**kwargs) # 그리고 사용자가 전달한 apikey가 서버에 저장된 apikey와 같다면 view의 사용자가 입력한 아큐먼트를 admin(view)로 보낸다.
        return 'Access Denined !'
    return wrapped_view

# d22cb18e86fc9e23996650150461c9f794ad3a4f

@app.route('/', methods=['GET'])
def index():
    return 'API Index'


@app.route('/file', methods=['GET'])
def file():
    path = request.args.get('path', None)
    if path:
        data = open('./files/' + path).read()
        return data
    return 'Error !'


@app.route('/admin', methods=['GET'])
@key_required # 데코레이터 때문에 admin 함수가 key_required인자로 들어가게 된다. 위에 주석을 보자!!
def admin():
    cmd = request.args.get('cmd', None)
    if cmd:
        result = subprocess.getoutput(cmd)
        return result
    else:
        return 'Error !'


if __name__ == '__main__':
    app.run(host='0.0.0.0')
